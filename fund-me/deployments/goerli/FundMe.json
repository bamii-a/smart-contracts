{
  "address": "0xfb6Ec349021b91556D9C1960ABC3cD686915952C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x33847b18668bac635eb08e578bbe37ba470cd88318a651cf8b6b0ffd616daedd",
  "receipt": {
    "to": null,
    "from": "0x3d883B9B8D74FFF45b3810be6fdeb10f9A2D1015",
    "contractAddress": "0xfb6Ec349021b91556D9C1960ABC3cD686915952C",
    "transactionIndex": 86,
    "gasUsed": "812197",
    "logsBloom": "0x
    "blockHash": "0xe5e0ea9aa3bd2452dd5c170d7def111f40508537576f6af524e679ce47d7d9d7",
    "transactionHash": "0x33847b18668bac635eb08e578bbe37ba470cd88318a651cf8b6b0ffd616daedd",
    "logs": [],
    "blockNumber": 8172963,
    "cumulativeGasUsed": "20419810",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd4a33860578de61dbabdc8bfdb98fd742fa7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "2e4d84814ab48d830615724e71edcc19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// get funds from users\\n// withdraw funds\\n// set a minimum funding value in usd\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // adding constants to variable names saves gas\\n    uint256 public constant MINIMUM_USD = 5 * 1e18;\\n\\n    // keep track of people (address) that fund the account\\n    address[] public funders;\\n\\n    // mapping\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        // msg.sender (whoever deploys this contract)\\n        // immutable function can only be called one time in the constructor\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        // payable makes this function / address payable\\n        // set minimun fund amount in usd\\n        // 1. how do we send eth to this contract\\n\\n        // msg.value access the value of what someone is sending\\n        // require(msg.value > 1e18) - requires the user to send at least 1eth\\n\\n        // msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Error message\\\"\\n        ); //1e18 == 1 * 10 ** 18 == 10000000000000000000 (value on wei of 1eth)\\n        // reverting undo any action and send remaining gas back\\n\\n        // msg.sender is whoever calls the fund function\\n        funders.push(msg.sender);\\n        // maps the sender to the value\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // for loop\\n        // reset funders array and arrays to amount funded\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex == funderIndex++\\n        ) {\\n            // returns the address of the index\\n            address funder = funders[funderIndex];\\n            // reset the balances of the mapping\\n            addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset array to make funders a blank array\\n        funders = new address[](0);\\n\\n        // withdraw the funds\\n        // ways to send ether - transfer, send, call\\n        // CALL\\n        // call func returns two variables (success, dataReturned)\\n        (\\n            bool callSuccess, /* bytes memory dataReturned */\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        // _; - if this was above the code, it performs everything in the code before going down to the require func\\n        // require(msg.sender == i_owner, \\\"sender is not owner\\\");\\n        // another way of handling error (gas efficient)\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        _; // represents doing the rest of the code\\n    }\\n\\n    // what happens if someone sends this contract Eth without calling the fund function?\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    // if you're sending empty data, it will automatically hit the receive\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // if you're sending NOT empty data, it will automatically hit the fallback\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n// TRANSFER\\n// msg.sender (type address)\\n// payable(msg.sender) (type payable address)\\n// payable(msg.sender).transfer(address(this).balance);\\n\\n// SEND\\n// payable(msg.sender).send(address(this).balance) - if this were to fail,\\n// the contract will not revert the transaction, so we add a \\\"bool\\\"\\n// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n// safe guard to make sure the transaction reverts if it fails\\n// require(sendSuccess, \\\"send failed\\\");\\n\",\"keccak256\":\"0x4746c88d7bdd59bd395b642edc6dfd8d40bbe96f1c7e48aff431b2aa8ffe940d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// libraries can't send eth nor declare state vriable\\nlibrary PriceConverter {\\n    //. nothing is beein modified so we use \\\"view\\\"\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // we need ABI and Address to get the data\\n        // go to chain link data feeds to get the contract address\\n        // Address - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n        // priceFeed is a variable of type AggregatorV3Interface\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (\\n            ,\\n            /* uint80 roundId*/\\n            int256 price, /* uint startedAt*/ /* uint timeStamp*/ /*uint80 answeredInRound*/\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n\\n        // Eth in USD\\n        // uint256(price * 1e10) converts the type from int to uint256 (type casting)\\n        return uint256(price * 1e10); // 1**10\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     // priceFeed is a variable of type AggregatorV3Interface\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x885d247c2a8746771f6b1a664f23d30f5c6921b77b93940dedcdcacacd6d5fd3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610eae380380610eae83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d4f61015f600039600081816102d3015261055d0152610d4f6000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610795565b610511565b6040516100d891906107db565b60405180910390f35b3480156100ed57600080fd5b506100f6610529565b60405161010391906107db565b60405180910390f35b34801561011857600080fd5b50610121610535565b60405161012e9190610855565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055b565b604051610163919061087f565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108c6565b61057f565b6040516101a0919061087f565b60405180910390f35b674563918244f400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105be90919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610950565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040157600080828154811061037b5761037a610970565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f9906109ce565b915050610359565b50600067ffffffffffffffff81111561041d5761041c610a16565b5b60405190808252806020026020018201604052801561044b5781602001602082028036833780820191505090505b506000908051906020019061046192919061068b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048890610a76565b60006040518083038185875af1925050503d80600081146104c5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ca565b606091505b505090508061050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610ad7565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b674563918244f4000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105ca836105fa565b90506000670de0b6b3a764000085836105e39190610af7565b6105ed9190610b68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190610c26565b5050509150506402540be400816106839190610ca1565b915050919050565b828054828255906000526020600020908101928215610704579160200282015b828111156107035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ab565b5b5090506107119190610715565b5090565b5b8082111561072e576000816000905550600101610716565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076282610737565b9050919050565b61077281610757565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b6000602082840312156107ab576107aa610732565b5b60006107b984828501610780565b91505092915050565b6000819050919050565b6107d5816107c2565b82525050565b60006020820190506107f060008301846107cc565b92915050565b6000819050919050565b600061081b61081661081184610737565b6107f6565b610737565b9050919050565b600061082d82610800565b9050919050565b600061083f82610822565b9050919050565b61084f81610834565b82525050565b600060208201905061086a6000830184610846565b92915050565b61087981610757565b82525050565b60006020820190506108946000830184610870565b92915050565b6108a3816107c2565b81146108ae57600080fd5b50565b6000813590506108c08161089a565b92915050565b6000602082840312156108dc576108db610732565b5b60006108ea848285016108b1565b91505092915050565b600082825260208201905092915050565b7f4572726f72206d65737361676500000000000000000000000000000000000000600082015250565b600061093a600d836108f3565b915061094582610904565b602082019050919050565b600060208201905081810360008301526109698161092d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d9826107c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0b57610a0a61099f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a60600083610a45565b9150610a6b82610a50565b600082019050919050565b6000610a8182610a53565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac1600b836108f3565b9150610acc82610a8b565b602082019050919050565b60006020820190508181036000830152610af081610ab4565b9050919050565b6000610b02826107c2565b9150610b0d836107c2565b9250828202610b1b816107c2565b91508282048414831517610b3257610b3161099f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b73826107c2565b9150610b7e836107c2565b925082610b8e57610b8d610b39565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb881610b99565b8114610bc357600080fd5b50565b600081519050610bd581610baf565b92915050565b6000819050919050565b610bee81610bdb565b8114610bf957600080fd5b50565b600081519050610c0b81610be5565b92915050565b600081519050610c208161089a565b92915050565b600080600080600060a08688031215610c4257610c41610732565b5b6000610c5088828901610bc6565b9550506020610c6188828901610bfc565b9450506040610c7288828901610c11565b9350506060610c8388828901610c11565b9250506080610c9488828901610bc6565b9150509295509295909350565b6000610cac82610bdb565b9150610cb783610bdb565b9250828202610cc581610bdb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfd57610cfc61099f565b5b8282058414831517610d1257610d1161099f565b5b509291505056fea264697066735822122082e22e4a45766a3f5baab8b384f94257c3dd5f830d8c9e6358457f680c0fc08364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610795565b610511565b6040516100d891906107db565b60405180910390f35b3480156100ed57600080fd5b506100f6610529565b60405161010391906107db565b60405180910390f35b34801561011857600080fd5b50610121610535565b60405161012e9190610855565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055b565b604051610163919061087f565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108c6565b61057f565b6040516101a0919061087f565b60405180910390f35b674563918244f400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105be90919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610950565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610356576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040157600080828154811061037b5761037a610970565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f9906109ce565b915050610359565b50600067ffffffffffffffff81111561041d5761041c610a16565b5b60405190808252806020026020018201604052801561044b5781602001602082028036833780820191505090505b506000908051906020019061046192919061068b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048890610a76565b60006040518083038185875af1925050503d80600081146104c5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ca565b606091505b505090508061050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610ad7565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b674563918244f4000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105ca836105fa565b90506000670de0b6b3a764000085836105e39190610af7565b6105ed9190610b68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190610c26565b5050509150506402540be400816106839190610ca1565b915050919050565b828054828255906000526020600020908101928215610704579160200282015b828111156107035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ab565b5b5090506107119190610715565b5090565b5b8082111561072e576000816000905550600101610716565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076282610737565b9050919050565b61077281610757565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b6000602082840312156107ab576107aa610732565b5b60006107b984828501610780565b91505092915050565b6000819050919050565b6107d5816107c2565b82525050565b60006020820190506107f060008301846107cc565b92915050565b6000819050919050565b600061081b61081661081184610737565b6107f6565b610737565b9050919050565b600061082d82610800565b9050919050565b600061083f82610822565b9050919050565b61084f81610834565b82525050565b600060208201905061086a6000830184610846565b92915050565b61087981610757565b82525050565b60006020820190506108946000830184610870565b92915050565b6108a3816107c2565b81146108ae57600080fd5b50565b6000813590506108c08161089a565b92915050565b6000602082840312156108dc576108db610732565b5b60006108ea848285016108b1565b91505092915050565b600082825260208201905092915050565b7f4572726f72206d65737361676500000000000000000000000000000000000000600082015250565b600061093a600d836108f3565b915061094582610904565b602082019050919050565b600060208201905081810360008301526109698161092d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d9826107c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0b57610a0a61099f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a60600083610a45565b9150610a6b82610a50565b600082019050919050565b6000610a8182610a53565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac1600b836108f3565b9150610acc82610a8b565b602082019050919050565b60006020820190508181036000830152610af081610ab4565b9050919050565b6000610b02826107c2565b9150610b0d836107c2565b9250828202610b1b816107c2565b91508282048414831517610b3257610b3161099f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b73826107c2565b9150610b7e836107c2565b925082610b8e57610b8d610b39565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb881610b99565b8114610bc357600080fd5b50565b600081519050610bd581610baf565b92915050565b6000819050919050565b610bee81610bdb565b8114610bf957600080fd5b50565b600081519050610c0b81610be5565b92915050565b600081519050610c208161089a565b92915050565b600080600080600060a08688031215610c4257610c41610732565b5b6000610c5088828901610bc6565b9550506020610c6188828901610bfc565b9450506040610c7288828901610c11565b9350506060610c8388828901610c11565b9250506080610c9488828901610bc6565b9150509295509295909350565b6000610cac82610bdb565b9150610cb783610bdb565b9250828202610cc581610bdb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfd57610cfc61099f565b5b8282058414831517610d1257610d1161099f565b5b509291505056fea264697066735822122082e22e4a45766a3f5baab8b384f94257c3dd5f830d8c9e6358457f680c0fc08364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 324,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 328,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 333,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}