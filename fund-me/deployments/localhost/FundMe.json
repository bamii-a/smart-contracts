{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7162d604002f1b5f5ea056cf01c187a8b9839e0e80b8e8d2d1754a42699bcf38",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "812173",
    "logsBloom": "0x
    "blockHash": "0x228280c7d5b7c4425b0d4f29721e1e79e82c23a6ddaf682a72d3b49da255d2a7",
    "transactionHash": "0x7162d604002f1b5f5ea056cf01c187a8b9839e0e80b8e8d2d1754a42699bcf38",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "812173",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "11efdda91f4d2cc188e46316e24fb779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Bami\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"---\"}},\"title\":\"A contract for funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"THIS FUNC FUNDS THIS CONTRACT\"}},\"notice\":\"demo sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// get funds from users\\n// withdraw funds\\n// set a minimum funding value in usd\\n\\n// SPDX-License-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.16;\\n\\n// imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// error\\nerror FundMe__NotOwner();\\n\\n// interfaces\\n\\n// libraries\\n\\n//contract\\n/**\\n * @title A contract for funding\\n * @author Bami\\n * @notice demo sample funding contract\\n * @dev\\n */\\ncontract FundMe {\\n    // ORDER LAYOUT\\n    // Type Declarations\\n    // State Variables\\n    // Events\\n    // Modifiers\\n    // Functions\\n\\n    // ORDER OF FUNCTIONS\\n    // constructor\\n    // receive function (if exists)\\n    // fallback function (if exists)\\n    // external\\n    // public\\n    // internal\\n    // private\\n\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    // mapping address to amount\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    // adding constants to variable names saves gas\\n    uint256 public constant MINIMUM_USD = 1 * 1e18;\\n\\n    // keep track of people (address) that fund the account\\n    address[] public funders;\\n\\n    address public immutable i_owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    modifier onlyOwner() {\\n        // _; - if this was above the code, it performs everything in the code before going down to the require func\\n        // require(msg.sender == i_owner, \\\"sender is not owner\\\");\\n        // another way of handling error (gas efficient)\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _; // represents doing the rest of the code\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        // msg.sender (whoever deploys this contract)\\n        // immutable function can only be called one time in the constructor\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // what happens if someone sends this contract Eth without calling the fund function?\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    // if you're sending empty data, it will automatically hit the receive\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // if you're sending NOT empty data, it will automatically hit the fallback\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice THIS FUNC FUNDS THIS CONTRACT\\n     * @dev ---\\n     */\\n\\n    function fund() public payable {\\n        // payable makes this function / address payable\\n        // set minimun fund amount in usd\\n        // 1. how do we send eth to this contract\\n\\n        // msg.value access the value of what someone is sending\\n        // require(msg.value > 1e18) - requires the user to send at least 1eth\\n\\n        // msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH\\\"\\n        ); //1e18 == 1 * 10 ** 18 == 10000000000000000000 (value on wei of 1eth)\\n        // reverting undo any action and send remaining gas back\\n\\n        // msg.sender is whoever calls the fund function\\n        funders.push(msg.sender);\\n        // maps the sender to the value\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // for loop\\n        // reset funders array and arrays to amount funded\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex == funderIndex++\\n        ) {\\n            // returns the address of the index\\n            address funder = funders[funderIndex];\\n            // reset the balances of the mapping\\n            addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // reset array to make funders a blank array\\n        funders = new address[](0);\\n\\n        // withdraw the funds\\n        // ways to send ether - transfer, send, call\\n        // CALL\\n        // call func returns two variables (success, dataReturned)\\n        (\\n            bool callSuccess, /* bytes memory dataReturned */\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n// TRANSFER\\n// msg.sender (type address)\\n// payable(msg.sender) (type payable address)\\n// payable(msg.sender).transfer(address(this).balance);\\n\\n// SEND\\n// payable(msg.sender).send(address(this).balance) - if this were to fail,\\n// the contract will not revert the transaction, so we add a \\\"bool\\\"\\n// bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n// safe guard to make sure the transaction reverts if it fails\\n// require(sendSuccess, \\\"send failed\\\");\\n\",\"keccak256\":\"0xb9a70a21c06bfcd51affc45feebae13ce383d73414edba6557689ef01daa4cea\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// libraries can't send eth nor declare state vriable\\nlibrary PriceConverter {\\n    //. nothing is beein modified so we use \\\"view\\\"\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // we need ABI and Address to get the data\\n        // go to chain link data feeds to get the contract address\\n        // Address - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n\\n        // priceFeed is a variable of type AggregatorV3Interface\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (\\n            ,\\n            /* uint80 roundId*/\\n            int256 price, /* uint startedAt*/ /* uint timeStamp*/ /*uint80 answeredInRound*/\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n\\n        // Eth in USD\\n        // uint256(price * 1e10) converts the type from int to uint256 (type casting)\\n        return uint256(price * 1e10); // 1**10\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     // priceFeed is a variable of type AggregatorV3Interface\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n    //     );\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x885d247c2a8746771f6b1a664f23d30f5c6921b77b93940dedcdcacacd6d5fd3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ead380380610ead83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d4e61015f600039600081816102d2015261055c0152610d4e6000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d0565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610794565b610510565b6040516100d891906107da565b60405180910390f35b3480156100ed57600080fd5b506100f6610528565b60405161010391906107da565b60405180910390f35b34801561011857600080fd5b50610121610534565b60405161012e9190610854565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055a565b604051610163919061087e565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108c5565b61057e565b6040516101a0919061087e565b60405180910390f35b670de0b6b3a76400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105bd90919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f9061094f565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610355576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104005760006001828154811061037b5761037a61096f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f8906109cd565b915050610358565b50600067ffffffffffffffff81111561041c5761041b610a15565b5b60405190808252806020026020018201604052801561044a5781602001602082028036833780820191505090505b506001908051906020019061046092919061068a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048790610a75565b60006040518083038185875af1925050503d80600081146104c4576040519150601f19603f3d011682016040523d82523d6000602084013e6104c9565b606091505b505090508061050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610ad6565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b670de0b6b3a764000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061058e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c9836105f9565b90506000670de0b6b3a764000085836105e29190610af6565b6105ec9190610b67565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b9190610c25565b5050509150506402540be400816106829190610ca0565b915050919050565b828054828255906000526020600020908101928215610703579160200282015b828111156107025782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106aa565b5b5090506107109190610714565b5090565b5b8082111561072d576000816000905550600101610715565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076182610736565b9050919050565b61077181610756565b811461077c57600080fd5b50565b60008135905061078e81610768565b92915050565b6000602082840312156107aa576107a9610731565b5b60006107b88482850161077f565b91505092915050565b6000819050919050565b6107d4816107c1565b82525050565b60006020820190506107ef60008301846107cb565b92915050565b6000819050919050565b600061081a61081561081084610736565b6107f5565b610736565b9050919050565b600061082c826107ff565b9050919050565b600061083e82610821565b9050919050565b61084e81610833565b82525050565b60006020820190506108696000830184610845565b92915050565b61087881610756565b82525050565b6000602082019050610893600083018461086f565b92915050565b6108a2816107c1565b81146108ad57600080fd5b50565b6000813590506108bf81610899565b92915050565b6000602082840312156108db576108da610731565b5b60006108e9848285016108b0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610939601a836108f2565b915061094482610903565b602082019050919050565b600060208201905081810360008301526109688161092c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d8826107c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0a57610a0961099e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a5f600083610a44565b9150610a6a82610a4f565b600082019050919050565b6000610a8082610a52565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac0600b836108f2565b9150610acb82610a8a565b602082019050919050565b60006020820190508181036000830152610aef81610ab3565b9050919050565b6000610b01826107c1565b9150610b0c836107c1565b9250828202610b1a816107c1565b91508282048414831517610b3157610b3061099e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b72826107c1565b9150610b7d836107c1565b925082610b8d57610b8c610b38565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb781610b98565b8114610bc257600080fd5b50565b600081519050610bd481610bae565b92915050565b6000819050919050565b610bed81610bda565b8114610bf857600080fd5b50565b600081519050610c0a81610be4565b92915050565b600081519050610c1f81610899565b92915050565b600080600080600060a08688031215610c4157610c40610731565b5b6000610c4f88828901610bc5565b9550506020610c6088828901610bfb565b9450506040610c7188828901610c10565b9350506060610c8288828901610c10565b9250506080610c9388828901610bc5565b9150509295509295909350565b6000610cab82610bda565b9150610cb683610bda565b9250828202610cc481610bda565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfc57610cfb61099e565b5b8282058414831517610d1157610d1061099e565b5b509291505056fea26469706673582212202580bbee40309126f7f1ec9045caa6f596bb5bbb9c22b2da8f10586738476a4164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d0565b005b3480156100b057600080fd5b506100cb60048036038101906100c69190610794565b610510565b6040516100d891906107da565b60405180910390f35b3480156100ed57600080fd5b506100f6610528565b60405161010391906107da565b60405180910390f35b34801561011857600080fd5b50610121610534565b60405161012e9190610854565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661055a565b604051610163919061087e565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108c5565b61057e565b6040516101a0919061087e565b60405180910390f35b670de0b6b3a76400006101e7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105bd90919063ffffffff16565b1015610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f9061094f565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610355576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104005760006001828154811061037b5761037a61096f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103f8906109cd565b915050610358565b50600067ffffffffffffffff81111561041c5761041b610a15565b5b60405190808252806020026020018201604052801561044a5781602001602082028036833780820191505090505b506001908051906020019061046092919061068a565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048790610a75565b60006040518083038185875af1925050503d80600081146104c4576040519150601f19603f3d011682016040523d82523d6000602084013e6104c9565b606091505b505090508061050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610ad6565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b670de0b6b3a764000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061058e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c9836105f9565b90506000670de0b6b3a764000085836105e29190610af6565b6105ec9190610b67565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b9190610c25565b5050509150506402540be400816106829190610ca0565b915050919050565b828054828255906000526020600020908101928215610703579160200282015b828111156107025782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106aa565b5b5090506107109190610714565b5090565b5b8082111561072d576000816000905550600101610715565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076182610736565b9050919050565b61077181610756565b811461077c57600080fd5b50565b60008135905061078e81610768565b92915050565b6000602082840312156107aa576107a9610731565b5b60006107b88482850161077f565b91505092915050565b6000819050919050565b6107d4816107c1565b82525050565b60006020820190506107ef60008301846107cb565b92915050565b6000819050919050565b600061081a61081561081084610736565b6107f5565b610736565b9050919050565b600061082c826107ff565b9050919050565b600061083e82610821565b9050919050565b61084e81610833565b82525050565b60006020820190506108696000830184610845565b92915050565b61087881610756565b82525050565b6000602082019050610893600083018461086f565b92915050565b6108a2816107c1565b81146108ad57600080fd5b50565b6000813590506108bf81610899565b92915050565b6000602082840312156108db576108da610731565b5b60006108e9848285016108b0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448000000000000600082015250565b6000610939601a836108f2565b915061094482610903565b602082019050919050565b600060208201905081810360008301526109688161092c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109d8826107c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0a57610a0961099e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a5f600083610a44565b9150610a6a82610a4f565b600082019050919050565b6000610a8082610a52565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac0600b836108f2565b9150610acb82610a8a565b602082019050919050565b60006020820190508181036000830152610aef81610ab3565b9050919050565b6000610b01826107c1565b9150610b0c836107c1565b9250828202610b1a816107c1565b91508282048414831517610b3157610b3061099e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b72826107c1565b9150610b7d836107c1565b925082610b8d57610b8c610b38565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb781610b98565b8114610bc257600080fd5b50565b600081519050610bd481610bae565b92915050565b6000819050919050565b610bed81610bda565b8114610bf857600080fd5b50565b600081519050610c0a81610be4565b92915050565b600081519050610c1f81610899565b92915050565b600080600080600060a08688031215610c4157610c40610731565b5b6000610c4f88828901610bc5565b9550506020610c6088828901610bfb565b9450506040610c7188828901610c10565b9350506060610c8288828901610c10565b9250506080610c9388828901610bc5565b9150509295509295909350565b6000610cab82610bda565b9150610cb683610bda565b9250828202610cc481610bda565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfc57610cfb61099e565b5b8282058414831517610d1157610d1061099e565b5b509291505056fea26469706673582212202580bbee40309126f7f1ec9045caa6f596bb5bbb9c22b2da8f10586738476a4164736f6c63430008110033",
  "devdoc": {
    "author": "Bami",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "---"
      }
    },
    "title": "A contract for funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "THIS FUNC FUNDS THIS CONTRACT"
      }
    },
    "notice": "demo sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 322,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 330,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 335,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}