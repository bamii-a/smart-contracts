{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(\n    uint80 _roundId,\n    int256 _answer,\n    uint256 _timestamp,\n    uint256 _startedAt\n  ) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// get funds from users\n// withdraw funds\n// set a minimum funding value in usd\n\n// SPDX-License-Identifier: MIT\n//pragma\npragma solidity ^0.8.16;\n\n// imports\nimport \"./PriceConverter.sol\";\n\n// error\nerror FundMe__NotOwner();\n\n// interfaces\n\n// libraries\n\n//contract\n/**\n * @title A contract for funding\n * @author Bami\n * @notice demo sample funding contract\n * @dev\n */\ncontract FundMe {\n    // ORDER LAYOUT\n    // Type Declarations\n    // State Variables\n    // Events\n    // Modifiers\n    // Functions\n\n    // ORDER OF FUNCTIONS\n    // constructor\n    // receive function (if exists)\n    // fallback function (if exists)\n    // external\n    // public\n    // internal\n    // private\n\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State Variables\n    // mapping address to amount\n    mapping(address => uint256) public addressToAmountFunded;\n\n    // adding constants to variable names saves gas\n    uint256 public constant MINIMUM_USD = 5 * 1e18;\n\n    // keep track of people (address) that fund the account\n    address[] public funders;\n\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner() {\n        // _; - if this was above the code, it performs everything in the code before going down to the require func\n        // require(msg.sender == i_owner, \"sender is not owner\");\n        // another way of handling error (gas efficient)\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _; // represents doing the rest of the code\n    }\n\n    constructor(address priceFeedAddress) {\n        // msg.sender (whoever deploys this contract)\n        // immutable function can only be called one time in the constructor\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // what happens if someone sends this contract Eth without calling the fund function?\n\n    // Explainer from: https://solidity-by-example.org/fallback/\n    // Ether is sent to contract\n    //      is msg.data empty?\n    //          /   \\\n    //         yes  no\n    //         /     \\\n    //    receive()?  fallback()\n    //     /   \\\n    //   yes   no\n    //  /        \\\n    //receive()  fallback()\n\n    // if you're sending empty data, it will automatically hit the receive\n    receive() external payable {\n        fund();\n    }\n\n    // if you're sending NOT empty data, it will automatically hit the fallback\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice THIS FUNC FUNDS THIS CONTRACT\n     * @dev ---\n     */\n\n    function fund() public payable {\n        // payable makes this function / address payable\n        // set minimun fund amount in usd\n        // 1. how do we send eth to this contract\n\n        // msg.value access the value of what someone is sending\n        // require(msg.value > 1e18) - requires the user to send at least 1eth\n\n        // msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Error message\"\n        ); //1e18 == 1 * 10 ** 18 == 10000000000000000000 (value on wei of 1eth)\n        // reverting undo any action and send remaining gas back\n\n        // msg.sender is whoever calls the fund function\n        funders.push(msg.sender);\n        // maps the sender to the value\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        // for loop\n        // reset funders array and arrays to amount funded\n\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex == funderIndex++\n        ) {\n            // returns the address of the index\n            address funder = funders[funderIndex];\n            // reset the balances of the mapping\n            addressToAmountFunded[funder] = 0;\n        }\n\n        // reset array to make funders a blank array\n        funders = new address[](0);\n\n        // withdraw the funds\n        // ways to send ether - transfer, send, call\n        // CALL\n        // call func returns two variables (success, dataReturned)\n        (\n            bool callSuccess, /* bytes memory dataReturned */\n\n        ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n}\n\n// Concepts we didn't cover yet (will cover in later sections)\n// 1. Enum\n// 2. Events\n// 3. Try / Catch\n// 4. Function Selector\n// 5. abi.encode / decode\n// 6. Hash with keccak256\n// 7. Yul / Assembly\n\n// TRANSFER\n// msg.sender (type address)\n// payable(msg.sender) (type payable address)\n// payable(msg.sender).transfer(address(this).balance);\n\n// SEND\n// payable(msg.sender).send(address(this).balance) - if this were to fail,\n// the contract will not revert the transaction, so we add a \"bool\"\n// bool sendSuccess = payable(msg.sender).send(address(this).balance);\n// safe guard to make sure the transaction reverts if it fails\n// require(sendSuccess, \"send failed\");\n"
    },
    "contracts/mocks/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// importing MockV3Aggregator contract from chainlink\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// libraries can't send eth nor declare state vriable\nlibrary PriceConverter {\n    //. nothing is beein modified so we use \"view\"\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // we need ABI and Address to get the data\n        // go to chain link data feeds to get the contract address\n        // Address - 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n\n        // priceFeed is a variable of type AggregatorV3Interface\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // );\n        (\n            ,\n            /* uint80 roundId*/\n            int256 price, /* uint startedAt*/ /* uint timeStamp*/ /*uint80 answeredInRound*/\n            ,\n            ,\n\n        ) = priceFeed.latestRoundData();\n\n        // Eth in USD\n        // uint256(price * 1e10) converts the type from int to uint256 (type casting)\n        return uint256(price * 1e10); // 1**10\n    }\n\n    // function getVersion() internal view returns (uint256) {\n    //     // priceFeed is a variable of type AggregatorV3Interface\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}